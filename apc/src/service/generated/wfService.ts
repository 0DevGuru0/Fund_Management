/*
 * Generated by orval v5.5.3 üç∫
 * Do not edit manually.
 * Workflow Service Rest API
 * Workflow Service Rest API
 * OpenAPI spec version: 1.0
 */
export interface CamundaGroup {
  domainId?: string;
  id: string;
  name?: string;
  parent?: CamundaGroup;
}

export interface CamundaUser {
  email?: string;
  first?: string;
  firstName?: string;
  groups?: CamundaGroup[];
  id: string;
  label?: string;
  last?: string;
  lastName?: string;
}

export interface Credential {
  password?: string;
  username?: string;
}

export interface Department {
  domainId?: string;
  id?: number;
  label: string;
  status: string;
}

export interface Membership {
  department?: Department;
  ended?: string;
  group?: CamundaGroup;
  id?: number;
  modified?: string;
  started?: string;
  status?: string;
  user?: CamundaUser;
}

export type SaveMembershipBatchUsingPOSTSubmissionBody = {};

export type PostUsingPOSTInputBody = {};

export type QueryAuths200 = {};

export type GetDepartmentsParams = { status: string };

export type QueryGroups200 = {};

export type CreateGroup200 = {};

export type DeleteGroup200 = {};

export type GetMembershipsParams = { department?: string; group?: string; user?: string };

export type QueryMembershipBatch200 = {};

export type GetMembershipDepartmentParams = { group?: string };

export type GetMembershipUsersParams = { group: string };

export type GetMembershipUsers200 = {};

export type GetProcessInstanceVariables200 = {};

export type QueryProcessDelete200 = {};

export type GetProcessInitParams = { procId: string };

export type GetProcessInit200 = {};

export type GetTaskGroupbyParams = { assignee?: string; priority?: number; processName?: string; taskName?: string };

export type GetTaskGroupby200Item = {};

export type GetTaskTodoParams = { procdefkey?: string };

export type GetTaskTodo200 = {};

export type GetTaskVariables200 = {};

export type QueryUsersParams = { id: string };

export type GetUserParentParams = { group: string };

import { mutator } from '../wfEngine/serviceMutator'


type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  export const getWorkflowServiceRestAPI = () => {
const queryAuths = <TData = QueryAuths200 | unknown>(
    credential: Credential,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/auth`, method: 'post',
      data: credential
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getDepartments = <TData = Department[]>(
    params?: GetDepartmentsParams,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/department`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getDepartment = <TData = Department>(
    id: number,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/department/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getGroups = <TData = CamundaGroup[]>(

 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/group`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const queryGroups = <TData = QueryGroups200 | unknown>(
    postUsingPOSTInputBody: PostUsingPOSTInputBody,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/group`, method: 'post',
      data: postUsingPOSTInputBody
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getGroup = <TData = CamundaGroup>(
    id: string,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/group/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const createGroup = <TData = CreateGroup200 | unknown>(
    id: string,
    postUsingPOSTInputBody: PostUsingPOSTInputBody,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/group/${id}`, method: 'put',
      data: postUsingPOSTInputBody
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const deleteGroup = <TData = DeleteGroup200 | unknown>(
    id: string,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/group/${id}`, method: 'delete'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getMemberships = <TData = Membership[]>(
    params?: GetMembershipsParams,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/membership`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const queryMembershipBatch = <TData = QueryMembershipBatch200 | unknown>(
    saveMembershipBatchUsingPOSTSubmissionBody: SaveMembershipBatchUsingPOSTSubmissionBody,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/membership/batch`, method: 'post',
      data: saveMembershipBatchUsingPOSTSubmissionBody
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getMembershipDepartment = <TData = CamundaUser[]>(
    departmentId: number,
    params?: GetMembershipDepartmentParams,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/membership/department/${departmentId}`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getMembershipUsers = <TData = GetMembershipUsers200>(
    params?: GetMembershipUsersParams,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/membership/users`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getProcessInstanceVariables = <TData = GetProcessInstanceVariables200>(
    id: string,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/process-instance/${id}/variables`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const queryProcessDelete = <TData = QueryProcessDelete200 | unknown>(
    saveMembershipBatchUsingPOSTSubmissionBody: SaveMembershipBatchUsingPOSTSubmissionBody,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/process/delete`, method: 'post',
      data: saveMembershipBatchUsingPOSTSubmissionBody
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getProcessInit = <TData = GetProcessInit200>(
    params?: GetProcessInitParams,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/process/init`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getTaskGroupby = <TData = GetTaskGroupby200Item[]>(
    field: 'assignee' | 'createTime' | 'name' | 'priority' | 'processName',
    params?: GetTaskGroupbyParams,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/task/groupby/${field}`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getTaskTodo = <TData = GetTaskTodo200>(
    params?: GetTaskTodoParams,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/task/todo`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getTaskVariables = <TData = GetTaskVariables200>(
    id: string,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/task/${id}/variables`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const queryUsers = <TData = CamundaUser | unknown>(
    params?: QueryUsersParams,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/user`, method: 'post',
      data: undefined,
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getUserParent = <TData = CamundaUser>(
    params?: GetUserParentParams,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/user/parent`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getUserParentgroup = <TData = CamundaUser[]>(
    groupId: string,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/user/parentgroup/${groupId}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const getUser = <TData = CamundaUser>(
    id: string,
 options?: SecondParameter<typeof mutator>) => {
      return mutator<TData>(
      {url: `/user/${id}`, method: 'get'
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  return {queryAuths,getDepartments,getDepartment,getGroups,queryGroups,getGroup,createGroup,deleteGroup,getMemberships,queryMembershipBatch,getMembershipDepartment,getMembershipUsers,getProcessInstanceVariables,queryProcessDelete,getProcessInit,getTaskGroupby,getTaskTodo,getTaskVariables,queryUsers,getUserParent,getUserParentgroup,getUser}};
